<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Roy's Repo</title><link>https://lianglouise.github.io/post/</link><description>Recent content in Posts on Roy's Repo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 07 Feb 2024 22:42:56 -0800</lastBuildDate><atom:link href="https://lianglouise.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>QUIC Address Validation</title><link>https://lianglouise.github.io/post/quic_address_validation/</link><pubDate>Wed, 07 Feb 2024 22:42:56 -0800</pubDate><guid>https://lianglouise.github.io/post/quic_address_validation/</guid><description>&lt;p>&lt;a href="https://www.rfc-editor.org/info/rfc9000" target="_blank">QUIC&lt;/a> is a new transport protocol meant to be the replacement of the TCP + TLS, which is on top of UDP. Other the security mechanisms provided by TLS, QUIC itself has offered an extension for an endpoint to do an identity verification to the remote endpoint, to prevent from traffic amplification attack. It&amp;rsquo;s called address validation, and it would be done along side with initial handshakes between client and server. This post will briefly talked about how this is done within QUIC.&lt;/p></description></item><item><title>QPACK Guide</title><link>https://lianglouise.github.io/post/qpack_guide/</link><pubDate>Tue, 28 Mar 2023 22:01:34 -0700</pubDate><guid>https://lianglouise.github.io/post/qpack_guide/</guid><description>&lt;p>&lt;a href="https://httpwg.org/specs/rfc9204.html" target="_blank">QPACK&lt;/a> is a header field compression format for HTTP/3 that makes HTTP/2â€™s HPACK header compression format compatible with the &lt;a href="https://datatracker.ietf.org/doc/rfc9000/" target="_blank">QUIC protocol&lt;/a>.&lt;/p>
&lt;p>In HTTP/3, the way the sender&amp;rsquo;s encoder and the receiver&amp;rsquo;s decoder reach agreement on the the state of the dynamic table for compression would be very different compared to HTTP/2. In this post, I would like to talk some of understanding I gained while I was reading the RFC and implementing QPACK.&lt;/p></description></item><item><title>Hash Table in Pintos</title><link>https://lianglouise.github.io/post/hash_table_in_pintos/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://lianglouise.github.io/post/hash_table_in_pintos/</guid><description>&lt;p>Apart from the &lt;a href="https://lianglouise.github.io/post/6.list_in_pintos/">linked list&lt;/a>, there is another handful structure offered by Pintos kernel library - &lt;em>Hash Table&lt;/em>.&lt;/p></description></item><item><title>What's The Hottest Anime in Each Season?</title><link>https://lianglouise.github.io/post/d25_data_story/</link><pubDate>Sun, 05 Dec 2021 11:02:17 -0500</pubDate><guid>https://lianglouise.github.io/post/d25_data_story/</guid><description>Abstract No matter for what kind of many screenplays, the most common topics among those watcher or fans are probably:
Which xxx is the best? Which xxx do you recommend? Do you think what&amp;rsquo;s the best xxx of 2021? xxx here can be substituted by any type of screenplays, i.e. movies, TV series, TV show and etc. This rule applies to one type of screenplays as well - TV anime.
In this post, I would present my analysis on what&amp;rsquo;s most welcomed TV animes in different period of time and what are the potential features make them become popular among viewers, with the help the data from anime community in Reddit and anime record data.</description></item><item><title>List in Pintos</title><link>https://lianglouise.github.io/post/list_in_pintos/</link><pubDate>Fri, 30 Jul 2021 21:22:57 -0400</pubDate><guid>https://lianglouise.github.io/post/list_in_pintos/</guid><description>&lt;p>This post is about an important data structure, embedded linked list, which is used massively in the pintos project amd offers a different idea how to create dynamic list in C. But its design usually made it easy to confuse the people at first, so it&amp;rsquo;s very interesting to look into its implementation.&lt;/p></description></item><item><title>KV Raft - 6.824 Lab3A</title><link>https://lianglouise.github.io/post/6.824_lab3a/</link><pubDate>Wed, 10 Feb 2021 23:44:05 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab3a/</guid><description>&lt;p>This post is about part A of Lab3 of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. For previous two parts, please refer to the posts about the Lab 1 and 2 under the tag &lt;a href="https://lianglouise.github.io/tags/distributed-system/">Distributed System&lt;/a>. In this post, we are to build a fault tolerant key-value services on top of &lt;a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank">Raft&lt;/a>.&lt;/p></description></item><item><title>Raft - 6.824 Lab2C</title><link>https://lianglouise.github.io/post/6.824_lab2c/</link><pubDate>Thu, 07 Jan 2021 00:21:03 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab2c/</guid><description>&lt;p>This post is about part C of Lab2 of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. For previous two parts, please refer to &lt;a href="https://lianglouise.github.io/post/6.824_lab2ab/">Part A and B&lt;/a>. In this one we are focusing on Persist in &lt;a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank">Raft&lt;/a>. The implementation would mostly follow the figure &lt;em>2&lt;/em> in the paper as well.&lt;/p></description></item><item><title>Raft - 6.824 Lab2A 2B</title><link>https://lianglouise.github.io/post/6.824_lab2ab/</link><pubDate>Sat, 02 Jan 2021 21:45:49 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab2ab/</guid><description>&lt;p>This post is about part A and B of Lab2 of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. It is about the implementation of &lt;a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank">Raft&lt;/a>. Here in these two part, we only discuss the section up to the end of section &lt;em>5&lt;/em> in the paper.&lt;/p></description></item><item><title>MapReduce - 6.824 Lab1</title><link>https://lianglouise.github.io/post/6.824_lab1_mapreduce/</link><pubDate>Wed, 23 Dec 2020 22:00:17 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab1_mapreduce/</guid><description>&lt;p>This is the first lab of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. It is about the implementation of &lt;a href="http://research.google.com/archive/mapreduce-osdi04.pdf" target="_blank">MapReduce&lt;/a>, a framework introduced by Google that can process huge volume of data parallelly by splitting a single task to multiple small ones and assigning them to a cluster of &amp;ldquo;cheap&amp;rdquo; machines. And by using this framework, also as mentioned in the paper, this lets programmer make use of distributed system without the need of experience of it.&lt;/p>
&lt;p>A very classic use case of this framework is counting words in a large file, which is also what we are to implement.&lt;/p></description></item><item><title>Some Practice on Implementing Signal Protocol With Python (2): Double Ratchet</title><link>https://lianglouise.github.io/post/some_practice_on_implementing_signal_protocol_with_python_2/</link><pubDate>Tue, 10 Nov 2020 23:13:55 -0500</pubDate><guid>https://lianglouise.github.io/post/some_practice_on_implementing_signal_protocol_with_python_2/</guid><description>&lt;p>After doing a handshake using X3DH, Both users can authenticate each other and agree on a shared master secret.&lt;/p>
&lt;p>So what&amp;rsquo;s next?&lt;/p></description></item><item><title>Some Practice on Implementing Signal Protocol With Python (1): X3DH</title><link>https://lianglouise.github.io/post/some_practice_on_implementing_signal_protocol_with_python_1/</link><pubDate>Tue, 20 Oct 2020 18:27:11 -0400</pubDate><guid>https://lianglouise.github.io/post/some_practice_on_implementing_signal_protocol_with_python_1/</guid><description>&lt;p>Lately I was working on a Web Security Project and I came across this very interesting Web Messaging Encryption Protocol - &lt;a href="https://signal.org/docs/" target="_blank">Signal Protocol&lt;/a>.&lt;/p></description></item><item><title>Hello-World!</title><link>https://lianglouise.github.io/post/hello_world/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://lianglouise.github.io/post/hello_world/</guid><description>Welcome to my github page.
Finally! At the end of 2019, I managed to launched my personal blog with the help of Hexo and archer theme. with the help of Hugo and Fuji theme.
I will share my naive thoughts and experiences on coding here. ðŸ˜œ
Hope you could find something helpful and interesting.</description></item></channel></rss>