<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Distributed System on Roy's Repo</title><link>https://lianglouise.github.io/tags/distributed-system/</link><description>Recent content in Distributed System on Roy's Repo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 10 Feb 2021 23:44:05 -0500</lastBuildDate><atom:link href="https://lianglouise.github.io/tags/distributed-system/index.xml" rel="self" type="application/rss+xml"/><item><title>KV Raft - 6.824 Lab3A</title><link>https://lianglouise.github.io/post/6.824_lab3a/</link><pubDate>Wed, 10 Feb 2021 23:44:05 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab3a/</guid><description>&lt;p>This post is about part A of Lab3 of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. For previous two parts, please refer to the posts about the Lab 1 and 2 under the tag &lt;a href="https://lianglouise.github.io/tags/distributed-system/">Distributed System&lt;/a>. In this post, we are to build a fault tolerant key-value services on top of &lt;a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank">Raft&lt;/a>.&lt;/p></description></item><item><title>Raft - 6.824 Lab2C</title><link>https://lianglouise.github.io/post/6.824_lab2c/</link><pubDate>Thu, 07 Jan 2021 00:21:03 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab2c/</guid><description>&lt;p>This post is about part C of Lab2 of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. For previous two parts, please refer to &lt;a href="https://lianglouise.github.io/post/6.824_lab2ab/">Part A and B&lt;/a>. In this one we are focusing on Persist in &lt;a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank">Raft&lt;/a>. The implementation would mostly follow the figure &lt;em>2&lt;/em> in the paper as well.&lt;/p></description></item><item><title>Raft - 6.824 Lab2A 2B</title><link>https://lianglouise.github.io/post/6.824_lab2ab/</link><pubDate>Sat, 02 Jan 2021 21:45:49 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab2ab/</guid><description>&lt;p>This post is about part A and B of Lab2 of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. It is about the implementation of &lt;a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank">Raft&lt;/a>. Here in these two part, we only discuss the section up to the end of section &lt;em>5&lt;/em> in the paper.&lt;/p></description></item><item><title>MapReduce - 6.824 Lab1</title><link>https://lianglouise.github.io/post/6.824_lab1_mapreduce/</link><pubDate>Wed, 23 Dec 2020 22:00:17 -0500</pubDate><guid>https://lianglouise.github.io/post/6.824_lab1_mapreduce/</guid><description>&lt;p>This is the first lab of &lt;a href="https://pdos.csail.mit.edu/6.824/index.html" target="_blank">MIT 6.824&lt;/a>, Distributed Systems. It is about the implementation of &lt;a href="http://research.google.com/archive/mapreduce-osdi04.pdf" target="_blank">MapReduce&lt;/a>, a framework introduced by Google that can process huge volume of data parallelly by splitting a single task to multiple small ones and assigning them to a cluster of &amp;ldquo;cheap&amp;rdquo; machines. And by using this framework, also as mentioned in the paper, this lets programmer make use of distributed system without the need of experience of it.&lt;/p>
&lt;p>A very classic use case of this framework is counting words in a large file, which is also what we are to implement.&lt;/p></description></item></channel></rss>