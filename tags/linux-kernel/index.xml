<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux kernel on Roy's Repo</title><link>https://lianglouise.github.io/tags/linux-kernel/</link><description>Recent content in linux kernel on Roy's Repo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 21 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lianglouise.github.io/tags/linux-kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Hash Table in Pintos</title><link>https://lianglouise.github.io/post/hash_table_in_pintos/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://lianglouise.github.io/post/hash_table_in_pintos/</guid><description>&lt;p>Apart from the &lt;a href="https://lianglouise.github.io/post/6.list_in_pintos/">linked list&lt;/a>, there is another handful structure offered by Pintos kernel library - &lt;em>Hash Table&lt;/em>.&lt;/p></description></item><item><title>List in Pintos</title><link>https://lianglouise.github.io/post/list_in_pintos/</link><pubDate>Fri, 30 Jul 2021 21:22:57 -0400</pubDate><guid>https://lianglouise.github.io/post/list_in_pintos/</guid><description>&lt;p>This post is about an important data structure, embedded linked list, which is used massively in the pintos project amd offers a different idea how to create dynamic list in C. But its design usually made it easy to confuse the people at first, so it&amp;rsquo;s very interesting to look into its implementation.&lt;/p></description></item></channel></rss>